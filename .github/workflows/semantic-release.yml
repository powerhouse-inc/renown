name: Semantic Release

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  REGISTRY: ghcr.io

jobs:
  semantic-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      issues: write
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Install PNPM
        uses: pnpm/action-setup@v3
        with:
          version: 10
          run_install: false

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run tests
        run: pnpm run lint

      - name: Semantic Release
        run: |
          pnpx semantic-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Get latest version tag
        id: get_version
        run: |
          git fetch --tags
          VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          if [ -n "$VERSION" ]; then
            echo "version=${VERSION#v}" >> $GITHUB_OUTPUT
            echo "Version: ${VERSION#v}"
          else
            echo "version=" >> $GITHUB_OUTPUT
            echo "No version tag found"
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image on release
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ github.repository }}:latest
            ${{ env.REGISTRY }}/${{ github.repository }}:${{ github.ref_name }}
            ${{ steps.get_version.outputs.version && format('{0}/{1}:{2}', env.REGISTRY, github.repository, steps.get_version.outputs.version) || '' }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            TAG=${{ steps.get_version.outputs.version || github.ref_name }}
