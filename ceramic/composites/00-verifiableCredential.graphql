## our overarching VC interface that acts agnostic of our proof type
interface VerifiableCredential
    @createModel(description: "A verifiable credential interface") {
    controller: DID! @documentAccount
    issuer: Issuer!
    context: [String!]! @string(maxLength: 1000) @list(maxLength: 100)
    type: [String!]! @string(maxLength: 1000) @list(maxLength: 100)
    credentialSchema: CredentialSchema!
    credentialStatus: CredentialStatus
    issuanceDate: DateTime!
    expirationDate: DateTime
}

type Issuer {
    id: String! @string(maxLength: 1000)
    ethereumAddress: String @string(maxLength: 1000)
}

type CredentialStatus {
    id: String! @string(maxLength: 1000)
    type: String! @string(maxLength: 1000)
}

type CredentialSchema {
    id: String! @string(maxLength: 1000)
    type: String! @string(maxLength: 1000)
}

## we'll use interfaces for our proof types to generalize them as well - this one's for EIP712
interface VCEIP712Proof implements VerifiableCredential
    @createModel(
        description: "A verifiable credential interface of type EIP712"
    ) {
    controller: DID! @documentAccount
    issuer: Issuer!
    context: [String!]! @string(maxLength: 1000) @list(maxLength: 100)
    type: [String!]! @string(maxLength: 1000) @list(maxLength: 100)
    credentialSchema: CredentialSchema!
    credentialStatus: CredentialStatus
    issuanceDate: DateTime!
    expirationDate: DateTime
    proof: ProofEIP712!
}

type ProofEIP712 {
    verificationMethod: String! @string(maxLength: 1000)
    created: DateTime!
    proofPurpose: String! @string(maxLength: 1000)
    type: String! @string(maxLength: 1000)
    proofValue: String! @string(maxLength: 1000)
    eip712: EIP712!
}

type EIP712 {
    domain: Domain!
    types: ProofTypes!
    primaryType: String! @string(maxLength: 100)
}

type Types {
    name: String! @string(maxLength: 100)
    type: String! @string(maxLength: 100)
}

type ProofTypes {
    EIP712Domain: [Types!]! @list(maxLength: 100)
    CredentialSchema: [Types!]! @list(maxLength: 100)
    CredentialSubject: [Types!]! @list(maxLength: 100)
    Issuer: [Types!]! @list(maxLength: 100)
    VerifiableCredential: [Types!]! @list(maxLength: 100)
}

type Domain {
    chainId: Int!
    name: String! @string(maxLength: 100)
    version: String! @string(maxLength: 100)
}

type CredentialSubject {
    app: String! @string(maxLength: 1000)
    id: DID! @string(maxLength: 1000)
    name: String @string(maxLength: 1000)
}

## define our EIP712 type that uses a hard-coded credentialSubject specific to our use case
type VerifiableCredentialEIP712 implements VerifiableCredential & VCEIP712Proof
    @createModel(
        accountRelation: LIST
        description: "A verifiable credential of type EIP712"
    )
    @createIndex(fields: [{ path: "issuanceDate" }])
    @createIndex(fields: [{ path: "expirationDate" }])
    @createIndex(fields: [{ path: "revocationDate" }])
    @createIndex(fields: [{ path: "issuerId" }])
    @createIndex(fields: [{ path: "subjectId" }]) {
    controller: DID! @documentAccount
    issuerId: String! @string(maxLength: 1000)
    subjectId: DID!
    issuer: Issuer!
    context: [String!]! @string(maxLength: 1000) @list(maxLength: 100)
    type: [String!]! @string(maxLength: 1000) @list(maxLength: 100)
    credentialSchema: CredentialSchema!
    credentialStatus: CredentialStatus
    issuanceDate: DateTime!
    expirationDate: DateTime
    revocationDate: DateTime
    proof: ProofEIP712!
    credentialSubject: CredentialSubject!
}
